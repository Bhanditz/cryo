#!/usr/bin/env ruby

require 'cryo'
require 'trollop'

required_parameters = %w(aws_access_key
                         aws_secret_key
                         host
                         password
                         snapshot_bucket
                         snapshot_prefix
                         tmp_path
                         user
                         report_path)

mode = ARGV.shift

options = Trollop::options do
  version "cryo #{Cryo::VERSION} (c) 2013 Airbnb"
  banner <<-END_OF_BANNER

#{version}

Welcome to Cryo, a simple backup utility

All options can be passed in with either the given command line options, or passed in via
environment with the same name, capitalized, and with CRYO_ appended. Like: CRYO_HOST instead of --host

More docs and examples can be found at https://github.com/airbnb/cryo

Usage:
      cryo [redis,mysql,postgres,filesystem,zookeeper] [options]

where [options] are:

END_OF_BANNER

  opt(:tmp_path,
      'where should temp files be created',
      type: String,
      default: ENV['CRYO_TMP_PATH'])

  opt(:snapshot_bucket,
      's3 bucket to use for snapshots',
      type: String,
      default: ENV['CRYO_SNAPSHOT_BUCKET'])

  opt(:snapshot_prefix,
      's3 object prefix to use for snapshots',
      type: String,
      default: ENV['CRYO_SNAPSHOT_PREFIX'])

  opt(:snapshot_key,
      's3 object key to use for snapshots. Defaults to UTC start time',
      type: String,
      default: ENV['CRYO_SNAPSHOT_KEY'])

  opt(:aws_access_key,
      'aws_access_key. Can be set using the AWS_ACCESS_KEY environment variable',
      type: String,
      default: ENV['CRYO_AWS_ACCESS_KEY'])

  opt(:aws_secret_key,
      'aws_secret_key. Can be set using the AWS_SECRET_KEY environment variable',
      type: String,
      default: ENV['CRYO_AWS_SECRET_KEY'])

  opt(:host,
      'remote host. Can be set using the CRYO_HOST environment variable',
      type: String,
      default: ENV['CRYO_HOST'])

  opt(:user,
      'remote user',
      type: String,
      default: ENV['CRYO_USER'])

  opt(:password,
      'remote password',
      type: String,
      default: ENV['CRYO_PASSWORD'])

  opt(:report_path,
      'where to write our report',
      :type => String,
      :default => ENV['CRYO_REPORT_PATH'])

  case mode
  when 'mysql'
  when 'redis'
    opt(:path,
        'path to redis database file',
        type: String,
        default: ENV['CRYO_PATH'])
    required_parameters << 'path'
  when 'postgres'
    opt(:database,
        'database to dump, otherwise pg_dumpall is used',
        type: String,
        default: ENV['CRYO_DATABASE'])
  when 'zookeeper'
    opt(:remote_data_dir,
        'path to zookeeper data dir',
        type: String,
        default: ENV['CRYO_REMOTE_DATA_DIR'])
    opt(:remote_txlog_dir,
        'path to zookeeper txlog dir',
        type: String,
        default: ENV['CRYO_REMOTE_TXLOG_DIR'])
  when 'filesystem'
    opt(:tar_dir,
      'path to the dir to tar zip',
      type: String,
      default: ENV['CRYO_TAR_DIR'])
  when 'list'
  when 'get'
  else
    unless mode == '--help'
      STDERR.puts 'ERROR! bad input. first option needs to be one of [redis, postgres, mysql, zookeeper, filesystem, list, get]'
      STDERR.puts 'Please use --help for more info'
      exit 1
    end
  end
end

options.merge!(type: mode)

required_parameters.each do |arg|
  Trollop::die arg.to_sym, "needs to specified on the commandline or set by the CRYO_#{arg.upcase} environment variable" \
    if options[arg.to_sym].nil? or ! options[arg.to_sym]
end unless mode == 'get'

run = Cryo.new(options)
run.backup!
run.write_report

#
# run.list_archives
