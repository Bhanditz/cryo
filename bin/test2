#!/usr/bin/env ruby

require 'trollop'
require_relative '../lib/cryo'


@required_inputs = %w(aws_access_key aws_secret_key)

@options={}

@noun=nil
@verb=nil

@log=true

def log(msg='')
  STDERR.puts msg if @log
end


def print_help_and_exit
  banner = <<-END_OF_BANNER
Welcome to Cryo, a simple backup utility. #{Cryo::VERSION} (c) 2013 Airbnb

All options can be passed in with either the given command line options, or passed in via
environment with the same name, capitalized, and with CRYO_ appended. Like: CRYO_HOST instead of --host

More docs and examples can be found at https://github.com/airbnb/cryo

Usage: 
      cryo [backup,list,get] [options]

where [options] are:

END_OF_BANNER
  puts banner
  Kernel.exit 1
end

def print_message_and_exit(message='')
  STDERR.puts message
  Kernel.exit 1
end

def parse_inputs
  log 'starting to parse command line inputs'
  while (next_argument = ARGV.shift)
    log "looping inside parse_inputs. next arg is #{next_argument}"
    print_help_and_exit unless next_argument.start_with? '--'
    formatted_key = next_argument.gsub(/^--/,'').gsub(/-/,'_').to_sym
    if !ARGV.empty? and !ARGV.first.start_with? '--'
      log 'this option has a param'
      param = ARGV.shift
    else
      log 'this arg does not have a param'
      param = true
    end
    @options.merge!({formatted_key => param})
  end
end

def verify_environment_variable(variable='')
  log "checking for environment variable #{variable}"
  formatted_variable_name = "CRYO_#{variable.upcase}"
  value = ENV[formatted_variable_name]
  if value.nil?
    log 'looks like the variable does not exist'
    print_message_and_exit "\nyou need to make sure that you set the #{formatted_variable_name} variable!"
  else
    log 'looks like the variable exists'
    @options.merge!({variable.to_sym => value})
  end
end

def verify_inputs
  @required_inputs.each do |input|
    verify_environment_variable input
  end
end


def backup
  %w{host}.each {|i| @required_inputs << i}
  case @noun
  when 'mysql'
  when 'redis'
  when 'postgres'
  else
    print_help_and_exit
  end
end


def list
  case @noun
  when 'snapshots'
  when 'archives'
  else
    print_help_and_exit
  end
end


def get
  case @noun
  when 'archives'
  when 'snapshots'
  else
    print_help_and_exit
  end
end


log 'starting to parse arguments'
print_help_and_exit if ARGV.size < 2
@verb = ARGV.shift
@noun = ARGV.shift
log "got a noun and a verb. #{@verb} and #{@noun}"

case @verb
when 'backup'
  backup
when 'list'
  list
when 'get'
  get
else
  print_help_and_exit
end

parse_inputs


verify_inputs

log "options are #{@options.inspect}"

Kernel.exit 2


SUB_COMMANDS = %w(backup list get)
global_opts = Trollop::options do
  STDERR.puts 'entering global options'
  stop_on_unknown
  version "cryo #{Cryo::VERSION} (c) 2013 Airbnb"

  
  opt(:aws_access_key,
      'aws_access_key. Can be set using the AWS_ACCESS_KEY environment variable',
      :type => String,
      :default => ENV['CRYO_AWS_ACCESS_KEY'] || nil,
      :required => true)
  stop_on SUB_COMMANDS
end





cmd = ARGV.shift # get the subcommand
cmd_opts = \
case cmd
when 'backup' # parse delete options
  Trollop::options do
    stop_on_unknown
    stop_on %w(aws_access_key)
    STDERR.puts 'entering backup options'
    opt :force, 'Force deletion'
  end
when 'list' # parse copy options
  Trollop::options do
    STDERR.puts 'entering list options'
    opt :double, 'Copy twice for safety\'s sake'
  end
when 'get' # parse copy options
  Trollop::options do
    STDERR.puts 'entering get options'
    opt :double, 'Copy twice for safety\'s sake'
  end
when nil
  STDERR.puts 'entering nil options'
  puts 'please call with --help if you need help'
  Kernel.exit 1
else
  STDERR.puts 'entering else options'
  Trollop::die "unknown subcommand #{cmd.inspect}"
end

always_required_options = Trollop::options do 
  STDERR.puts 'entering always required options'
  stop_on_unknown


  opt(:aws_secret_key,
      'aws_secret_key. Can be set using the AWS_SECRET_KEY environment variable',
      :type => String,
      :default => ENV['CRYO_AWS_SECRET_KEY'] || nil,
      :required => true)
end


puts "Global options: #{global_opts.inspect}"
puts "Subcommand: #{cmd.inspect}"
puts "Subcommand options: #{cmd_opts.inspect}"
puts "Remaining arguments: #{ARGV.inspect}"
